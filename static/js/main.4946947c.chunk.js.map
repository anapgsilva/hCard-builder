{"version":3,"sources":["components/Builder.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Builder","props","buildFileSelector","type","onClick","saveFile","multiple","handleInput","event","setState","target","name","value","showPreview","handleFileSelect","preventDefault","refs","fileUploader","click","console","log","files","file","imgURL","URL","createObjectURL","previewPhoto","state","className","map","detail","key","toUpperCase","onChange","href","id","this","ref","style","display","Component","Preview","userInfo","surname","undefined","src","alt","email","phone","street","suburb","postcode","country","App","previewInfo","info","savePhoto","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4946947c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\n\nclass Builder extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      imgURL: ''\n    };\n  }\n\n  buildFileSelector = () => {\n    return (\n      <input type=\"file\" onClick={this.saveFile} multiple=\"multiple\"/>\n    );\n  }\n\n  handleInput = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n    this.props.showPreview({[event.target.name]: event.target.value});\n  }\n\n  handleFileSelect = (event) => {\n    event.preventDefault();\n    this.refs.fileUploader.click();\n  }\n\n  saveFile = (event) => {\n    console.log('uploader', this.refs);\n    console.log(event.target.files[0]);\n    const file = event.target.files[0];\n    const imgURL = URL.createObjectURL(file);\n    this.setState({imgURL});\n    this.props.previewPhoto(imgURL);\n  }\n\n  render(){\n    const personal = ['given name', 'surname', 'email', 'phone'];\n    const address = ['house name or #', 'street', 'suburb', 'state', 'postcode', 'country'];\n\n    return (\n      <div className=\"builder\">\n        <h1>hCard Builder</h1>\n\n        <h5>PERSONAL DETAILS</h5>\n\n        <div className=\"details\">\n          {personal.map( detail => {\n            return (\n              <div className=\"inputs\" key={detail} >\n                <label>{detail.toUpperCase()}</label>\n                <input type=\"text\" name={detail} onChange={this.handleInput}/>\n              </div>)\n\n          })\n          }\n        </div>\n\n        <h5>ADDRESS</h5>\n\n        <div className=\"details\">\n          {address.map( detail => {\n            return (\n              <div className=\"inputs\" key={detail} >\n                <label>{detail.toUpperCase()}</label>\n                <input type=\"text\" name={detail} onChange={this.handleInput}/>\n              </div>)\n\n          })}\n        </div>\n\n\n        <div className=\"buttons\">\n          <a href=\"http\" id=\"avatar-btn\" onClick={this.handleFileSelect} >Upload Avatar</a>\n\n          <button id=\"create-btn\">Create hCard</button>\n        </div>\n\n        <input type=\"file\" id=\"file\" ref=\"fileUploader\" onChange={this.saveFile} style={{display: \"none\"}}/>\n\n      </div>\n    );\n  }\n}\n\nexport default Builder;\n","import React from 'react';\n\nconst Preview = (props) => {\n\n  const userInfo = props.userInfo;\n\n  return (\n    <div className=\"preview\">\n\n      <h3>HCARD PREVIEW</h3>\n\n      <div className=\"card\">\n\n        <div className=\"header\">\n          <h1>{userInfo['given name']} {userInfo.surname}</h1>\n          {userInfo.imgURL !== undefined\n            ?\n            <div className=\"photo\">\n              <img src={userInfo.imgURL} alt=\"profile\"/>\n            </div>\n            : ''\n          }\n        </div>\n\n        <div className=\"info\">\n          <div>\n            <label>EMAIL</label>\n            {userInfo.email}\n          </div>\n\n          <div>\n            <label>PHONE</label>\n            {userInfo.phone}\n          </div>\n\n          <div>\n            <label>ADDRESS</label>\n            {userInfo['house name or #']} {userInfo.street}\n          </div>\n\n          <div>\n            <label></label>\n            {userInfo.suburb}\n            {userInfo.suburb && userInfo.state ?\n              \", \"\n              :\n              \"\"\n            }\n            {userInfo.state}\n          </div>\n\n          <div>\n            <label>POSTCODE <span>{userInfo.postcode}</span></label>\n\n            <label>COUNTRY <span>{userInfo.country}</span></label>\n          </div>\n\n        </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default Preview;\n","import React, {Component} from 'react';\nimport './App.css';\nimport './preview.css';\nimport Builder from './components/Builder';\nimport Preview from './components/Preview';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    };\n  }\n\n  previewInfo = (info) => {\n    this.setState({...info});\n  }\n\n  savePhoto = (imgURL) => {\n    this.setState({imgURL});\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Builder showPreview={this.previewInfo} previewPhoto={this.savePhoto} />\n        <Preview userInfo={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}